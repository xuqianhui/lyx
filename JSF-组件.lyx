#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
\usepackage {layout}%输出页面布局
\usepackage {menukeys}
\usepackage {footnote} 
\makesavenoteenv {tabular}
\usepackage[bottom]{footmisc}
\usepackage {placeins}
\usepackage{scrextend}%labeling环境
\usepackage[inline]{enumitem}%内联列表
\usepackage{xcolor}
\usepackage{tasks}%水平列表
\usepackage{lettrine}%首字浮沉
\usepackage{alltt}%逐字文本
\usepackage{hyperref}
\usepackage{dirtree}
\usepackage{multicol}
\usepackage[style]{fncychap}
\usepackage{forest}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
JSF-UI组件
\end_layout

\begin_layout Section
联系，架构
\end_layout

\begin_layout Standard
JSF提供了一个丰富的、灵活的组件架构，包括：
\end_layout

\begin_layout Standard
一组UIComponent类，用于指定UI组件的状态和行为（在上一篇博客中有简单记录）。
\end_layout

\begin_layout Standard
一个呈现模型，用来定义如何使用不同方法呈现组件。
\end_layout

\begin_layout Standard
一个事件和监听器模型，定义了如何处理组件事件。
\end_layout

\begin_layout Standard
一个转换器模型，定义了如何在一个组件上注册数据转换器。
\end_layout

\begin_layout Standard
一个验证器模型，定义了如何在一个组件上注册验证器。
\end_layout

\begin_layout Standard
JSF通过使用HTML组件标签将UI组件添加到页面，页面上所有组件标签都必须在view标签之内，嵌套在view标签之内的是form标签。需要提交数据的其他组件对
应的标签必须嵌入在form标签中。
\end_layout

\begin_layout Section
常见组件类
\end_layout

\begin_layout Standard
上一篇关于组件的博客中简单的记录类标签类，及其实现的行为方法。因为当时着重考虑标签组件之间的联系，没仔细看组件类的具体内容，这里详细写一下几个常见组件类
\end_layout

\begin_layout Itemize
UIForm表示一个输入表单，它的子组件给用户呈现信息或者使用表单提交数据，所有显示数据或者从用户接收数据的控件都应该包含在form标签之内
\end_layout

\begin_layout Itemize
UIDate组件支持到数据对象集合的绑定。循环遍历数据源中的每个对象，将数据显示为一个HTML表格
\end_layout

\begin_layout Itemize
UICommand组件被激活的时候会执行一个动作，呈现为按钮或者超链接，除了通用属性，它还可以使用
\begin_inset Newline newline
\end_inset

action：它是逻辑结果String或指向返回逻辑结果String的bean方法的方法表达式。在这两种情况下，默认的NavigationHandler实例使用
逻辑结果字符串来确定在激活UICommand组件时要访问的页面。
\begin_inset Newline newline
\end_inset

actionListener：它是一个方法表达式，指向处理由UICommand组件触发的操作事件的bean方法。
\end_layout

\begin_layout Itemize
UIInput组件为用户显示一个值，且允许用户修改这个数据，例如文本框UIOutput组件显示不能修改的数据。这两种组件都能以四种方式呈现
\begin_inset Newline newline
\end_inset

呈现方式如图：
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename imgs/UIInput和UIOutput.png
	scale 40

\end_inset


\begin_inset Newline newline
\end_inset

除了通用方法以外的其他属性如图：
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename imgs/UIInput其他属性.png
	scale 40

\end_inset


\end_layout

\begin_layout Itemize
UISelectBoolean定义了值为boolean的组件，JSF为表示boolean状态提供的唯一标签是selectBooleanCheckbox
\end_layout

\begin_layout Itemize
UISelectMany定义了一个组件，允许用户从一组值中选择一个或者多个值。可以呈现为一组复选框，一个列表框或者一个下拉菜单
\end_layout

\begin_layout Itemize
UISelectOne组件允许用户从一组值中选择一个值。可以呈现为一个列表框、一组单选按钮、一个下拉菜单
\end_layout

\begin_layout Itemize
UISelectItem和UISelectItems是能够被嵌入到一个UISelectMany或者UISelectOne中的组件。UISelectItem与一个
SelectItem实例相关联，包含每一项的value、label、description
\end_layout

\begin_layout Section
组件的呈现
\end_layout

\begin_layout Standard
组件的呈现可以由一个独立的呈现器来定义。组件编写人员可以只定义一次组件的行为，但是可以创建多个renderers每个renderer定义一种不同的方法将组件呈现
给同一个或者不同的客户。
\end_layout

\begin_layout Standard
如果将呈现交给renderer。可以将所有的编码解码操作都交给renderer完成。只需要执行以下任务：
\end_layout

\begin_layout Itemize
创建Renderer类
\end_layout

\begin_layout Itemize
用一个render kit注册renderer
\end_layout

\begin_layout Itemize
在组件的标签处理器中标识renderer类型
\end_layout

\end_body
\end_document
