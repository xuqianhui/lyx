#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
\usepackage {layout}%输出页面布局
\usepackage {menukeys}
\usepackage {footnote} 
\makesavenoteenv {tabular}
\usepackage[bottom]{footmisc}
\usepackage {placeins}
\usepackage{scrextend}%labeling环境
\usepackage[inline]{enumitem}%内联列表
\usepackage{xcolor}
\usepackage{tasks}%水平列表
\usepackage{lettrine}%首字浮沉
\usepackage{alltt}%逐字文本
\usepackage{hyperref}
\usepackage{dirtree}
\usepackage{multicol}
\usepackage[style]{fncychap}
\usepackage{forest}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
JSF生命周期的一些思考
\end_layout

\begin_layout Standard
了解了生命周期的各个阶段以后也相应的有一些思考，仿佛通过生命周期使JSF一环扣一环的运行，整个系统的运行都是通过对生命周期各阶段请求的处理和事件的处理。我觉得这
和信号的处理十分相似，客户端的请求作为输入，经过系统的处理最终呈现响应，而生命周期就充当了这个系统（只是个类比，因为生命周期也包含呈现响应阶段）它执行了Web应
用程序中的对进入数据进行处理的全部任务。生命周期各阶段对请求的处理带来了许多方便，只需要遵守各阶段的规则，剩下的都交给系统处理。JSF 的生命周期是值得遵守的，
因为它的逻辑非常好。表单必须在任何应用程序逻辑执行之前进行验证，并且在进行验证之前，必须对域中的数据进行转换。遵守生命周期的规定，可以更自由地考虑有关验证和转换
的问题，而不是请求处理本身的阶段。
\end_layout

\begin_layout Standard
从查阅的资料来看，过去Web应用程序必需的大部分开发来处理客户端请求，动态环境还要求处理大量的参数，程序的开发十分复杂。然而生命周期可以用一种连贯的、基于事件的
方式处理这项工作。而且不需要知道许多细节和幕后的工作也能轻松的构建应用程序.JSF请求处理生命周期能把服务器端Java Bean属性自动同步到有层次的组件集,是它
与其他Web技术相比的主要优势。由于Web天生是无状态的，即客户端与服务器之间的一个事务对前一个事务没有记忆，所以JavaServer Faces通过自动维护代
表客户端当前状态的服务器端视图（view）而解决了这个问题。这允许JSF开发人员把精力集中在服务器端组件。编写代码处理每个请求值或者修改用户界面状态的烦琐工作，
都通过一组阶段（phase）（每个阶段中，都用连贯的方式执行具体的数据处理任务）由JavaServer Faces请求处理生命周期自动处理。
\end_layout

\begin_layout Standard
以下是生命周期的各阶段，用前后连贯的顺序执行检查进入的数据是否有效、触发服务器端的应用程序逻辑等任务。允许每个阶段清晰地描述执行本阶段之前需要存在的前提条件，以
及本阶段执行之后会存在的后置条件
\end_layout

\begin_layout Standard
恢复视图：在内存中恢复或创建代表客户端用户界面信息的服务器端组件树（视图）。 
\end_layout

\begin_layout Standard
应用请求值：用来自客户端的最新数据更新这些服务器端组件。 
\end_layout

\begin_layout Standard
处理验证：对新数据执行验证和数据类型转换。 
\end_layout

\begin_layout Standard
更新模型值：用新数据更新服务器端模型对象。 
\end_layout

\begin_layout Standard
调用应用程序：调用满足请求所需要的应用程序逻辑，然后如果有需要，再导航到新页面。 
\end_layout

\begin_layout Standard
呈现响应：把响应呈现给请求客户端。 
\end_layout

\begin_layout Standard
总结来说：就是把烦琐的请求参数值处理工作从Web应用程序开发中拿出来，让开发人员把更多精力放在应用程序逻辑上。无需了解技术工作原理的所有细节，就可以编写
 JSF 应用程序
\end_layout

\begin_layout Standard
参考自krystal的博客：http://blog.sina.com.cn/s/blog_a1c8858c0101a3ge.html
\end_layout

\end_body
\end_document
