#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
\usepackage {layout}%输出页面布局
\usepackage {menukeys}
\usepackage {footnote} 
\makesavenoteenv {tabular}
\usepackage[bottom]{footmisc}
\usepackage {placeins}
\usepackage{scrextend}%labeling环境
\usepackage[inline]{enumitem}%内联列表
\usepackage{xcolor}
\usepackage{tasks}%水平列表
\usepackage{lettrine}%首字浮沉
\usepackage{alltt}%逐字文本
\usepackage{hyperref}
\usepackage{dirtree}
\usepackage{multicol}
\usepackage[style]{fncychap}
\usepackage{forest}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
JSF用户界面组件类
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/xuqianhui/devel/lyx/imgs/HTML标签1.png
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Standard
在学习JSF标签的时候，发现标签都归类于组件类（如上图所示），发现对于组件的了解不够深入，在查阅了相关资料后对组件标签等的关系才逐渐明了。有的组件类和接口理解起
来还是比较抽象，先记录在此，以便日后查看。以下内容参考自：http://docs.oracle.com/cd/E19159-01/819-3669/bnaqe/in
dex.html。
\end_layout

\begin_layout Standard
JavaServerFaces技术提供了一组UI组件类和相关的行为接口指定所有UI组件功能，例如保持组件状态，维护对象的引用，以及驱动一组标准组件的事件处理和呈
现，组件类是完全可扩展的，允许组件编写者创建自己的自定义组件。只有组件编写者才需要直接使用组件类和行为接口。应用程序开发人员通过在页面上包含代表它的标签来使用标
准UI组件，大多数组件可以以不同的方式呈现在页面上。例如，UICommand组件可以呈现为按钮或超链接。
\end_layout

\begin_layout Standard
所有JavaServerFaces UI组件类都扩展自UIComponentBase，它定义了UI组件的默认状态和行为。JavaServerFaces技术包含以
下一组UI组件类：
\end_layout

\begin_layout Section*
UI组件类
\end_layout

\begin_layout Standard
UIColumn：表示UIData组件中的单列数据。
\end_layout

\begin_layout Standard
UICommand：表示激活时触发动作的控件。
\end_layout

\begin_layout Standard
UIData：表示绑定到由DataModel实例表示的数据集合的数据。
\end_layout

\begin_layout Standard
UIForm：封装一组向应用程序提交数据的控件。这个组件类似于HTML中的表单标签。
\end_layout

\begin_layout Standard
UIGraphic：显示图像。
\end_layout

\begin_layout Standard
UIInput：从用户输入数据。这个类是UIOutput的一个子类。
\end_layout

\begin_layout Standard
UIMessage：显示本地化消息。
\end_layout

\begin_layout Standard
UIMessages：显示一组本地化消息。
\end_layout

\begin_layout Standard
UIOutput：显示页面上的数据输出。
\end_layout

\begin_layout Standard
UIPanel：管理其子组件的布局。
\end_layout

\begin_layout Standard
UIParameter：表示替换参数。
\end_layout

\begin_layout Standard
UISelectBoolean：允许用户通过选择或取消选择来设置控件上的布尔值。这个类是UIInput的一个子类。
\end_layout

\begin_layout Standard
UISelectItem：表示一组项目中的单个项目。
\end_layout

\begin_layout Standard
UISelectItems：表示一整套项目。
\end_layout

\begin_layout Standard
UISelectMany：允许用户从一组项目中选择多个项目。这个类是UIInput的一个子类。
\end_layout

\begin_layout Standard
UISelectOne：允许用户从一组项目中选择一个项目。这个类是UIInput的一个子类。
\end_layout

\begin_layout Standard
UIViewRoot：表示组件树的根。
\end_layout

\begin_layout Section*
行为接口
\end_layout

\begin_layout Standard
除了扩展UIComponentBase之外，组件类还实现了一个或多个行为接口
\end_layout

\begin_layout Standard
UICommand实现ActionSource2和StateHolder; 
\end_layout

\begin_layout Standard
UIOutput扩展和组件类UIOutput实现StateHolder和ValueHolder;
\end_layout

\begin_layout Standard
UIInput扩展和组件类UIInput实现EditableValueHolder，StateHolder，和ValueHolder。
\end_layout

\begin_layout Standard
UIComponentBase实现StateHolder。
\end_layout

\begin_layout Standard
这些行为接口如下：
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ActionSource：表示组件可以触发动作事件。此接口适用于基于JavaServer Faces技术1.1_01和更低版本的组件。
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ActionSource2：扩展ActionSource，因此提供相同的功能。然而，它允许组件在引用处理动作事件的方法时使用统一的EL。
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
EditableValueHolder：扩展ValueHolder并指定可编辑组件的其他功能，例如验证和发布值更改事件。
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
NamingContainer：要求此组件的每个组件都具有唯一的ID。
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
StateHolder：表示组件具有必须在请求之间保存的状态。
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ValueHolder：表示组件维护本地值以及访问模型层中数据的选项。
\end_layout

\end_body
\end_document
