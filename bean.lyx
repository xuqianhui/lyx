#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
\usepackage {layout}%输出页面布局
\usepackage {menukeys}
\usepackage {footnote} 
\makesavenoteenv {tabular}
\usepackage[bottom]{footmisc}
\usepackage {placeins}
\usepackage{scrextend}%labeling环境
\usepackage[inline]{enumitem}%内联列表
\usepackage{xcolor}
\usepackage{tasks}%水平列表
\usepackage{lettrine}%首字浮沉
\usepackage{alltt}%逐字文本
\usepackage{hyperref}
\usepackage{dirtree}
\usepackage{multicol}
\usepackage[style]{fncychap}
\usepackage{forest}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Managed Beans
\end_layout

\begin_layout Section
Basic Beans and Managed Beans
\end_layout

\begin_layout Subsection
Basic JavaBeans
\end_layout

\begin_layout Standard
在java中bean是遵循某些约定的 java 类：
\end_layout

\begin_layout Standard
必须有一个无参的公共构造函数：可以显式定义此类构造函数或省略所有构造函数
\end_layout

\begin_layout Standard
不应具有公共的实例变量 （字段)：可以使用访问器方法，不允许直接访问
\end_layout

\begin_layout Standard
应通过get、set方法访问持久性值
\end_layout

\begin_layout Standard
使用值表达式：JSF使用#{book.title}调用book里的getTitle方法，布尔类型的属性可以使用isName而不是用getName，重要的是方法，而
不是实例变量的名字，属性名称在代码中的任何位置都不存在。它只是方法名称的快捷方式
\end_layout

\begin_layout Subsection
bean属性-getter/setter方法的快捷键
\end_layout

\begin_layout Standard
将方法转换为属性值的方法：去掉get或者set将下一个字母变为小写，例如：
\end_layout

\begin_layout Itemize
方法名称: getFirstname
\end_layout

\begin_layout Itemize
属性名：firstName
\end_layout

\begin_layout Itemize
值表达式：#{customer.firstName}
\end_layout

\begin_layout Standard
例外 1: 布尔属性
\end_layout

\begin_layout Itemize
方法名称: getPrime 或 isPrime
\end_layout

\begin_layout Itemize
属性名：prime
\end_layout

\begin_layout Itemize
值表达式：#{myNumber.prime}
\end_layout

\begin_layout Standard
例外 2: 连续大写字母
\end_layout

\begin_layout Itemize
方法名称：getURL
\end_layout

\begin_layout Itemize
属性名:URL
\end_layout

\begin_layout Itemize
值表达式：#{webSite.URL}
\end_layout

\begin_layout Subsection
为什么不使用公共字段
\end_layout

\begin_layout Standard
可以给值添加约束条件，如果类的用户直接访问了这些字段，他们各自都要进行约束条件的检查。
\end_layout

\begin_layout Standard
可以在不更改界面的情况下更改内部实现
\end_layout

\begin_layout Standard
可以执行任意的“副作用”，如果类的用户直接访问了这些字段, 则他们各自负责执行副作用
\end_layout

\begin_layout Subsection
Managed Beans
\end_layout

\begin_layout Standard
JSF中，bean存储web页面的状态，JSF自动管理一些bean：
\end_layout

\begin_layout Standard
酌情创建和丢弃bean
\end_layout

\begin_layout Standard
显示页面时读取bean属性，发布表单时设置bean属性
\end_layout

\begin_layout Standard
控制它的生命周期
\end_layout

\begin_layout Standard
出现的问题：调用多次managed beans的getter方法：例如，显示表单的时候至少调用一次，显示结果时再一次调用
\end_layout

\begin_layout Standard
方法：getter 方法仅返回现有值，在动作控制器方法里储存实例变量的数据
\end_layout

\begin_layout Subsection
JSF bean的三个部分
\end_layout

\begin_layout Standard
用于表示输入元素的 getter/setter 方法
\end_layout

\begin_layout Standard
响应控制器的方法（action）：jsf 自动调用 
\end_layout

\begin_layout Standard
从输入引申的属性：根据业务逻辑的结果，在动作控制器方法里实现，需要一个 getter 方法, 以便可以在结果页中输出值 ，但不要求有 setter
 方法
\end_layout

\begin_layout Section
业务逻辑
\end_layout

\begin_layout Standard
如何防止数据的改变引起其他部分代码的改变：类似List<String> names = new ArrayList<>();使用list而不是arraylist
，想从 arraylist 切换到 linkedlist不需要更改主类中的代码
\end_layout

\begin_layout Standard
使用独立的方法查找派生数据：不要直接在操作控制器方法中计算派生数据, 而是使用单独的方法 
\end_layout

\begin_layout Standard
简单输入简单输出：不返回找到数据的Hibernate对象或任何细节，返回一个java对象来表示结果 
\end_layout

\begin_layout Standard
编写接口：制作一个像CustomerLookupService一样的接口并使用这种类型，防止依赖某种具体类型制作单独的方法 
\end_layout

\begin_layout Standard
使用依赖项注入：在上面的示例中, 仍有一行代码在切换实现时必须更改。在主类中注入具体的类型, 这样在切换接口的具体实现时不会发生任何变化
\end_layout

\end_body
\end_document
