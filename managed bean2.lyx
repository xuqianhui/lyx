#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
\usepackage {layout}%输出页面布局
\usepackage {menukeys}
\usepackage {footnote} 
\makesavenoteenv {tabular}
\usepackage[bottom]{footmisc}
\usepackage {placeins}
\usepackage{scrextend}%labeling环境
\usepackage[inline]{enumitem}%内联列表
\usepackage{xcolor}
\usepackage{tasks}%水平列表
\usepackage{lettrine}%首字浮沉
\usepackage{alltt}%逐字文本
\usepackage{hyperref}
\usepackage{dirtree}
\usepackage{multicol}
\usepackage[style]{fncychap}
\usepackage{forest}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Managed Beans 2
\end_layout

\begin_layout Section
从选项中选择值（菜单，列表，单选按钮）
\end_layout

\begin_layout Standard
菜单之类的通常使用两个bean属性：一个是列表选项，另一个是提交时发送的值：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<h:selectOneMenu value="#{bean1.propertyForSelection}"> 
\end_layout

\begin_layout Plain Layout

  <f:selectItems value="#{bean2.propertyForOptions}"/>
\end_layout

\begin_layout Plain Layout

</h:selectOneMenu>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
输入类型的选择：
\end_layout

\begin_layout Itemize
h:selectOneMenu
\end_layout

\begin_layout Itemize
h:selectOneListbox（注意box的b为小写）
\end_layout

\begin_layout Itemize
h:selectOneRadio：如果使用<h:selectOneRadio … layout="pageDirection">，则单选按钮垂直排列;如果使用l
ayout="lineDirection，或者省略，则水平排列
\end_layout

\begin_layout Standard
Multi-selections：类似的多项选择为：
\end_layout

\begin_layout Standard
h:selectManyMenu, h:selectManyListbox, and h:selectManyCheckbox
\end_layout

\begin_layout Standard
这些选择使用array 或者 List不是单一的值
\end_layout

\begin_layout Standard
h:selectManyMenu在浏览器中的呈现方式十分不同，而且很难在Firefox中使用，大多数人只使用另外两个
\end_layout

\begin_layout Subsection
更多的细节
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<h:selectOneMenu value="#{bean1.selection}"> 
\end_layout

\begin_layout Plain Layout

  <f:selectItems value="#{bean2.options}"/>
\end_layout

\begin_layout Plain Layout

</h:selectOneMenu>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
beans：options和selection不一定要来自于同一个bean
\end_layout

\begin_layout Itemize
Options：可以是array、List类型（显示和返回的值相同）的值，也可以是Map（keys是显示值）
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Map keys are the values displayed.
 One selection, the corresponding Map value is returned.
 You usually use LinkedHashMap to preserve ordering.
 You can also have the Map values be complex objects, but then you need
 a converter.
\end_layout

\end_inset

，或者一组bean（使用itemLabel 和itemVar）
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Array或者List对象：使用itemLabel 选择要显示的对象的一部分，使用 itemValue 选择要返回的对象的一部分
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Options中的对象
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<h:selectOneListbox value="#{bean1.selection}"> 
\end_layout

\begin_layout Plain Layout

  <f:selectItems value="#{bean2.options}"
\end_layout

\begin_layout Plain Layout

                 var="bn" 
\end_layout

\begin_layout Plain Layout

                 itemLabel="#{bn.property1}" 
\end_layout

\begin_layout Plain Layout

                 itemValue="#{bn.property2}"/> 
\end_layout

\begin_layout Plain Layout

</h:selectOneListbox>
\end_layout

\end_inset

var：选项中的每个 bean 将依次绑定到此名称
\begin_inset Newline newline
\end_inset

itemLabel：要显示在选项列表中的 bean 的一部分
\begin_inset Newline newline
\end_inset

itemValue：用户选择时返回的 bean 的一部分
\end_layout

\begin_layout Itemize
f: namespace：必须在页面上方声明<html … xmlns:f="http://xmlns.jcp.org/jsf/core" …>
\end_layout

\begin_layout Section
Application Scope
\end_layout

\begin_layout Standard
bean的范围：控制managed beans可以保持多久，以及哪些用户和请求可以访问以前的 bean 实例
\begin_inset Newline newline
\end_inset

使用注解或者在faces-config.xml中配置
\end_layout

\begin_layout Subsection
Request Scope
\end_layout

\begin_layout Standard
为每个 http 请求创建一个新的 bean 实例, 无论它是同一用户还是同一页。这是所有 jsf 中最常用的范围 
\end_layout

\begin_layout Standard
注解：@request scope，但是request scope是默认的，可以省略
\end_layout

\begin_layout Standard
<h:inputText value="#{bankForm.customerId}"/>的几点说明：
\end_layout

\begin_layout Standard
bean 为每个提交实例化两次，一次是当表单显示的时候，调用getCustomerId，另一次是当表单提交的时候
\end_layout

\begin_layout Standard
如果同一 bean 名称出现在不同的页面上，会使用不同的实例
\end_layout

\begin_layout Subsection
Application Scope
\end_layout

\begin_layout Standard
第一次访问具有该 bean 名称的任何页时, 将对该 bean 进行实例化，从那时起，即使是不同的用户或不同的页面，使用相同的 bean 实例，但是,
 不同的 web 应用程序是独立的。
\end_layout

\begin_layout Standard
包含用户数据的 bean永远不要使用Application Scope，在本地计算机上使用单个用户进行测试可能会显示正确的结果, 但对于多个同时使用的用户，有一
个用户的数据可能会覆盖其他数据
\end_layout

\begin_layout Standard
注解：@ApplicationScoped：
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Optionally, use with @ManagedBean(eager=true)
\end_layout

\end_inset

此选项使对象在应用程序加载时被实例化
\end_layout

\begin_layout Standard
#{messages.message1}：第一次访问此页 (或任何具有该 bean 名称的页) 时, 将对消息进行实例化。从那时起, 相同的 bean
 实例用于所有用户和使用该 bean 名称的所有页。
\end_layout

\begin_layout Subsection
Session Scope
\end_layout

\begin_layout Standard
第一次使用 bean 名称的任何页被特定用户访问时, 将对其进行实例化。从那时起, 如果它是相同的 bean 名称和相同的用户, 则使用相同的
 bean 实例, 即使它是不同的页面。不同的用户会得到不同的实例
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
User determined by JSESSIONID cookie (usually) or jsessionid URL parameter
 (sometimes).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
通常用于用户首选项 (字体、颜色、语言)。也用于随着时间推移积累的数据（购物车, 考试问题）
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
bean 应该是可序列化的, 以便会话数据可以跨服务器重新启动, 因此在群集服务器上, 会话数据可以在节点之间共享。
\end_layout

\end_inset


\end_layout

\begin_layout Section
Menus, Listboxes等等使用Application Scope
\end_layout

\begin_layout Standard
如果选项可以更改：同一个bean使用两次，不是application scoped
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<h:selectOneMenu value="#{bean1.propertyForSelection}">
\end_layout

\begin_layout Plain Layout

  <f:selectItems value="#{bean1.propertyForOptions}"/>
\end_layout

\begin_layout Plain Layout

</h:selectOneMenu>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
如果选项总是相同的：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<h:selectOneMenu value="#{bean1（User data bean (not application scoped)）.property
ForSelection}"> 
\end_layout

\begin_layout Plain Layout

  <f:selectItems value="#{bean2(application scoped）.propertyForOptions}"/>
 
\end_layout

\begin_layout Plain Layout

</h:selectOneMenu>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
使用静态数据也是合理的选择
\end_layout

\begin_layout Section
菜单、列表和单选按钮的预选
\end_layout

\begin_layout Standard
Getter方法影响初始选项：
\end_layout

\begin_layout Standard
如果用户选择的 getter 方法返回值与其中一个选项匹配, 则是最初显示的值
\end_layout

\begin_layout Standard
如果 getter 返回 null 或无匹配值：对于Menus来说,显示最高值;其他的不做选择，也就是说，对于列表框和单选按钮, 总是有匹配的选项
\end_layout

\begin_layout Standard
Maps和集合类的对象：getter 应匹配返回值, 而不是显示值
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
